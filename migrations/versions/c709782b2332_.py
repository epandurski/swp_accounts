"""empty message

Revision ID: c709782b2332
Revises: 
Create Date: 2020-06-15 22:45:19.589233

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'c709782b2332'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('account',
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('creation_date', sa.DATE(), nullable=False),
    sa.Column('last_change_seqnum', sa.Integer(), nullable=False),
    sa.Column('last_change_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('principal', sa.BigInteger(), nullable=False),
    sa.Column('interest_rate', sa.REAL(), nullable=False),
    sa.Column('interest', sa.FLOAT(), nullable=False),
    sa.Column('last_config_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('last_config_seqnum', sa.Integer(), nullable=False),
    sa.Column('last_transfer_number', sa.BigInteger(), nullable=False),
    sa.Column('last_transfer_committed_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('last_outgoing_transfer_date', sa.DATE(), nullable=False),
    sa.Column('negligible_amount', sa.REAL(), nullable=False),
    sa.Column('config_flags', sa.Integer(), nullable=False),
    sa.Column('locked_amount', sa.BigInteger(), nullable=False, comment='The total sum of all pending transfer locks (the total sum of the values of the `pending_transfer.sender_locked_amount` column) for this account. This value has been reserved and must be subtracted from the available amount, to avoid double-spending.'),
    sa.Column('pending_transfers_count', sa.Integer(), nullable=False, comment='The number of `pending_transfer` records for this account.'),
    sa.Column('last_transfer_id', sa.BigInteger(), nullable=False, comment='Incremented when a new `prepared_transfer` record is inserted. It is used to generate sequential numbers for the `prepared_transfer.transfer_id` column. When the account is created, `last_transfer_id` has its lower 40 bits set to zero, and its higher 24 bits calculated from the value of `creation_date` (the number of days since Jan 1st, 1970).'),
    sa.Column('status_flags', sa.Integer(), nullable=False, comment='Contain additional account status bits: 65536 - deleted, 131072 - established interest rate, 262144 - overflown.'),
    sa.Column('last_reminder_ts', sa.TIMESTAMP(timezone=True), nullable=False, comment='The moment at which the last `AccountUpdateSignal` was sent to remind that the account still exists. This column helps to prevent sending reminders too often.'),
    sa.CheckConstraint('interest_rate >= -50.0 AND interest_rate <= 100.0'),
    sa.CheckConstraint('last_transfer_id >= 0'),
    sa.CheckConstraint('last_transfer_number >= 0'),
    sa.CheckConstraint('locked_amount >= 0'),
    sa.CheckConstraint('negligible_amount >= 0.0'),
    sa.CheckConstraint('pending_transfers_count >= 0'),
    sa.CheckConstraint('principal > -9223372036854775808'),
    sa.PrimaryKeyConstraint('debtor_id', 'creditor_id'),
    comment='Tells who owes what to whom.'
    )
    op.create_table('account_maintenance_signal',
    sa.Column('inserted_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('signal_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('request_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('debtor_id', 'creditor_id', 'signal_id')
    )
    op.create_table('account_purge_signal',
    sa.Column('inserted_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('creation_date', sa.DATE(), nullable=False),
    sa.PrimaryKeyConstraint('debtor_id', 'creditor_id', 'creation_date')
    )
    op.create_table('account_transfer_signal',
    sa.Column('inserted_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('transfer_number', sa.BigInteger(), nullable=False),
    sa.Column('coordinator_type', sa.String(length=30), nullable=False),
    sa.Column('committed_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('acquired_amount', sa.BigInteger(), nullable=False),
    sa.Column('other_creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('transfer_note', sa.TEXT(), nullable=False),
    sa.Column('transfer_flags', sa.Integer(), nullable=False),
    sa.Column('creation_date', sa.DATE(), nullable=False),
    sa.Column('principal', sa.BigInteger(), nullable=False),
    sa.Column('previous_transfer_number', sa.BigInteger(), nullable=False),
    sa.PrimaryKeyConstraint('debtor_id', 'creditor_id', 'transfer_number')
    )
    op.create_table('account_update_signal',
    sa.Column('inserted_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('signal_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('last_change_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('last_change_seqnum', sa.Integer(), nullable=False),
    sa.Column('principal', sa.BigInteger(), nullable=False),
    sa.Column('interest', sa.FLOAT(), nullable=False),
    sa.Column('interest_rate', sa.REAL(), nullable=False),
    sa.Column('last_transfer_number', sa.BigInteger(), nullable=False),
    sa.Column('last_transfer_committed_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('last_outgoing_transfer_date', sa.DATE(), nullable=False),
    sa.Column('last_config_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('last_config_seqnum', sa.Integer(), nullable=False),
    sa.Column('creation_date', sa.DATE(), nullable=False),
    sa.Column('negligible_amount', sa.REAL(), nullable=False),
    sa.Column('config_flags', sa.Integer(), nullable=False),
    sa.Column('status_flags', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('debtor_id', 'creditor_id', 'signal_id')
    )
    op.create_table('finalized_transfer_signal',
    sa.Column('inserted_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('sender_creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('transfer_id', sa.BigInteger(), nullable=False),
    sa.Column('coordinator_type', sa.String(length=30), nullable=False),
    sa.Column('coordinator_id', sa.BigInteger(), nullable=False),
    sa.Column('coordinator_request_id', sa.BigInteger(), nullable=False),
    sa.Column('recipient_creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('prepared_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('finalized_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('committed_amount', sa.BigInteger(), nullable=False),
    sa.Column('status_code', sa.String(length=30), nullable=False),
    sa.PrimaryKeyConstraint('debtor_id', 'sender_creditor_id', 'transfer_id')
    )
    op.create_table('pending_account_change',
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('change_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('principal_delta', sa.BigInteger(), nullable=False, comment='The change in `account.principal`.'),
    sa.Column('interest_delta', sa.BigInteger(), nullable=False, comment='The change in `account.interest`.'),
    sa.Column('unlocked_amount', sa.BigInteger(), nullable=True, comment='If not NULL, the value must be subtracted from `account.locked_amount`, and `account.pending_transfers_count` must be decremented.'),
    sa.Column('coordinator_type', sa.String(length=30), nullable=False),
    sa.Column('transfer_note', sa.TEXT(), nullable=True, comment='A note from the sender. Can be any string that the sender wants the recipient to see. If the account change represents a committed transfer, the note will be included in the generated `on_account_transfer_signal` event, otherwise the note is ignored. Can be NULL only if `principal_delta` is zero.'),
    sa.Column('other_creditor_id', sa.BigInteger(), nullable=False, comment='If the account change represents a committed transfer, this is the other party in the transfer. When `principal_delta` is positive, this is the sender. When `principal_delta` is negative, this is the recipient. When `principal_delta` is zero, the value is irrelevant.'),
    sa.Column('inserted_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.CheckConstraint('principal_delta = 0 OR transfer_note IS NOT NULL'),
    sa.CheckConstraint('unlocked_amount >= 0'),
    sa.PrimaryKeyConstraint('debtor_id', 'creditor_id', 'change_id'),
    comment='Represents a pending change to a given account. Pending updates to `account.principal`, `account.interest`, and `account.locked_amount` are queued to this table, before being processed, because this allows multiple updates to one account to coalesce, reducing the lock contention on `account` table rows.'
    )
    op.create_table('prepared_transfer_signal',
    sa.Column('inserted_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('sender_creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('signal_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('transfer_id', sa.BigInteger(), nullable=False),
    sa.Column('coordinator_type', sa.String(length=30), nullable=False),
    sa.Column('coordinator_id', sa.BigInteger(), nullable=False),
    sa.Column('coordinator_request_id', sa.BigInteger(), nullable=False),
    sa.Column('locked_amount', sa.BigInteger(), nullable=False),
    sa.Column('recipient_creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('prepared_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('gratis_period', sa.Integer(), nullable=False),
    sa.Column('demurrage_rate', sa.FLOAT(), nullable=False),
    sa.Column('deadline', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('debtor_id', 'sender_creditor_id', 'signal_id')
    )
    op.create_table('rejected_config_signal',
    sa.Column('inserted_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('signal_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('config_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('config_seqnum', sa.Integer(), nullable=False),
    sa.Column('config_flags', sa.Integer(), nullable=False),
    sa.Column('negligible_amount', sa.REAL(), nullable=False),
    sa.Column('config', sa.String(), nullable=False),
    sa.Column('rejection_code', sa.String(length=30), nullable=False),
    sa.PrimaryKeyConstraint('debtor_id', 'creditor_id', 'signal_id')
    )
    op.create_table('rejected_transfer_signal',
    sa.Column('inserted_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('sender_creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('signal_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('coordinator_type', sa.String(length=30), nullable=False),
    sa.Column('coordinator_id', sa.BigInteger(), nullable=False),
    sa.Column('coordinator_request_id', sa.BigInteger(), nullable=False),
    sa.Column('rejection_code', sa.String(length=30), nullable=False),
    sa.Column('available_amount', sa.BigInteger(), nullable=False),
    sa.Column('total_locked_amount', sa.BigInteger(), nullable=False),
    sa.Column('recipient', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('debtor_id', 'sender_creditor_id', 'signal_id')
    )
    op.create_table('transfer_request',
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('sender_creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('transfer_request_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('coordinator_type', sa.String(length=30), nullable=False, comment='Indicates which subsystem has initiated the transfer and is responsible for finalizing it (coordinating the transfer). The value must be a valid python identifier, all lowercase, no double underscores. Example: direct, interest, circular.'),
    sa.Column('coordinator_id', sa.BigInteger(), nullable=False),
    sa.Column('coordinator_request_id', sa.BigInteger(), nullable=False),
    sa.Column('min_amount', sa.BigInteger(), nullable=False),
    sa.Column('max_amount', sa.BigInteger(), nullable=False),
    sa.Column('minimum_account_balance', sa.BigInteger(), nullable=False),
    sa.Column('recipient_creditor_id', sa.BigInteger(), nullable=False),
    sa.CheckConstraint('min_amount <= max_amount'),
    sa.CheckConstraint('min_amount >= 0'),
    sa.PrimaryKeyConstraint('debtor_id', 'sender_creditor_id', 'transfer_request_id'),
    comment='Represents a request to secure (prepare) some amount for transfer, if it is available on a given account. If the request is fulfilled, a new row will be inserted in the `prepared_transfer` table. Requests are queued to the `transfer_request` table, before being processed, because this allows many requests from one sender to be processed at once, reducing the lock contention on `account` table rows.'
    )
    op.create_table('prepared_transfer',
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('sender_creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('transfer_id', sa.BigInteger(), nullable=False),
    sa.Column('coordinator_type', sa.String(length=30), nullable=False),
    sa.Column('coordinator_id', sa.BigInteger(), nullable=False),
    sa.Column('coordinator_request_id', sa.BigInteger(), nullable=False),
    sa.Column('recipient_creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('prepared_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('gratis_period', sa.Integer(), nullable=False),
    sa.Column('demurrage_rate', sa.FLOAT(), nullable=False),
    sa.Column('deadline', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('sender_locked_amount', sa.BigInteger(), nullable=False, comment='The actual transferred (committed) amount may not exceed this number.'),
    sa.Column('last_reminder_ts', sa.TIMESTAMP(timezone=True), nullable=True, comment='The moment at which the last `PreparedTransferSignal` was sent to remind that the prepared transfer must be finalized. A `NULL` means that no reminders have been sent yet. This column helps to prevent sending reminders too often.'),
    sa.CheckConstraint('demurrage_rate > -100.0 AND demurrage_rate <= 0.0'),
    sa.CheckConstraint('gratis_period >= 0'),
    sa.CheckConstraint('sender_locked_amount > 0'),
    sa.CheckConstraint('transfer_id > 0'),
    sa.ForeignKeyConstraint(['debtor_id', 'sender_creditor_id'], ['account.debtor_id', 'account.creditor_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('debtor_id', 'sender_creditor_id', 'transfer_id'),
    comment='A prepared transfer represent a guarantee that a particular transfer of funds will be successful if ordered (committed). A record will remain in this table until the transfer has been committed or dismissed.'
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('prepared_transfer')
    op.drop_table('transfer_request')
    op.drop_table('rejected_transfer_signal')
    op.drop_table('rejected_config_signal')
    op.drop_table('prepared_transfer_signal')
    op.drop_table('pending_account_change')
    op.drop_table('finalized_transfer_signal')
    op.drop_table('account_update_signal')
    op.drop_table('account_transfer_signal')
    op.drop_table('account_purge_signal')
    op.drop_table('account_maintenance_signal')
    op.drop_table('account')
    # ### end Alembic commands ###
