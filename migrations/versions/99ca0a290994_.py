"""empty message

Revision ID: 99ca0a290994
Revises: 
Create Date: 2019-06-11 22:42:53.319416

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '99ca0a290994'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('account',
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('principal', sa.BigInteger(), nullable=False, comment='The total owed amount. Can be negative. At any time, the sum of the principals of all accounts (including the issuer account) for a given debtor will be zero.'),
    sa.Column('interest_rate', sa.REAL(), nullable=False, comment='Annual rate (in percents) at which interest accumulates on the account'),
    sa.Column('interest_rate_last_change_seqnum', sa.Integer(), nullable=True),
    sa.Column('interest_rate_last_change_ts', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('interest', sa.FLOAT(), nullable=False, comment='The amount of interest accumulated on the account before `last_change_ts`, but not added to the `principal` yet. Can be a negative number. `interest`gets zeroed and added to the principal once in while (like once per week).'),
    sa.Column('locked_amount', sa.BigInteger(), nullable=False, comment='The total sum of all pending transfer locks'),
    sa.Column('prepared_transfers_count', sa.SmallInteger(), nullable=False, comment='The number of `prepared_transfer` records for this account.'),
    sa.Column('last_change_seqnum', sa.Integer(), nullable=False, comment='Incremented (with wrapping) on every change in `principal`, `interest_rate`, `interest`, or `status`.'),
    sa.Column('last_change_ts', sa.TIMESTAMP(timezone=True), nullable=False, comment='Updated on every increment of `last_change_seqnum`. Must never decrease.'),
    sa.Column('last_outgoing_transfer_date', sa.DATE(), nullable=True, comment='Updated on each transfer for which this account is the sender.'),
    sa.Column('status', sa.SmallInteger(), nullable=False, comment='Additional account status flags.'),
    sa.CheckConstraint('interest_rate > -100.0'),
    sa.CheckConstraint('locked_amount >= 0'),
    sa.CheckConstraint('prepared_transfers_count >= 0'),
    sa.PrimaryKeyConstraint('debtor_id', 'creditor_id')
    )
    op.create_table('account_change_signal',
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('change_seqnum', sa.Integer(), nullable=False),
    sa.Column('change_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('principal', sa.BigInteger(), nullable=False),
    sa.Column('interest', sa.FLOAT(), nullable=False),
    sa.Column('interest_rate', sa.REAL(), nullable=False),
    sa.Column('last_outgoing_transfer_date', sa.DATE(), nullable=True),
    sa.Column('status', sa.SmallInteger(), nullable=False),
    sa.PrimaryKeyConstraint('debtor_id', 'creditor_id', 'change_seqnum')
    )
    op.create_table('committed_transfer_signal',
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('signal_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('coordinator_type', sa.String(length=30), nullable=False),
    sa.Column('sender_creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('recipient_creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('committed_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('committed_amount', sa.BigInteger(), nullable=False),
    sa.Column('committed_transfer_id', sa.BigInteger(), nullable=True),
    sa.Column('transfer_info', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.PrimaryKeyConstraint('debtor_id', 'signal_id')
    )
    op.create_table('issuer',
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('creditor_id', sa.BigInteger(), nullable=True),
    sa.Column('last_change_seqnum', sa.Integer(), nullable=True),
    sa.Column('last_change_ts', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('debtor_id')
    )
    op.create_table('issuer_policy',
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('max_total_credit', sa.BigInteger(), nullable=False, comment='The total amount owed to creditors should not surpass this value.'),
    sa.Column('last_change_seqnum', sa.Integer(), nullable=True),
    sa.Column('last_change_ts', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.CheckConstraint('max_total_credit >= 0'),
    sa.PrimaryKeyConstraint('debtor_id')
    )
    op.create_table('prepared_transfer_signal',
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('sender_creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('transfer_id', sa.BigInteger(), nullable=False),
    sa.Column('coordinator_type', sa.String(length=30), nullable=False),
    sa.Column('recipient_creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('amount', sa.BigInteger(), nullable=False),
    sa.Column('sender_locked_amount', sa.BigInteger(), nullable=False),
    sa.Column('prepared_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('coordinator_id', sa.BigInteger(), nullable=False),
    sa.Column('coordinator_request_id', sa.BigInteger(), nullable=False),
    sa.PrimaryKeyConstraint('debtor_id', 'sender_creditor_id', 'transfer_id')
    )
    op.create_table('rejected_transfer_signal',
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('signal_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('coordinator_type', sa.String(length=30), nullable=False),
    sa.Column('coordinator_id', sa.BigInteger(), nullable=False),
    sa.Column('coordinator_request_id', sa.BigInteger(), nullable=False),
    sa.Column('details', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.PrimaryKeyConstraint('debtor_id', 'signal_id')
    )
    op.create_table('scheduled_account_change',
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('principal_delta', sa.BigInteger(), nullable=False),
    sa.Column('interest_delta', sa.BigInteger(), nullable=False),
    sa.Column('scheduled_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('debtor_id', 'creditor_id')
    )
    op.create_table('prepared_transfer',
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('sender_creditor_id', sa.BigInteger(), nullable=False, comment='The payer'),
    sa.Column('transfer_id', sa.BigInteger(), autoincrement=True, nullable=False, comment='Along with `debtor_id` and `sender_creditor_id` uniquely identifies a transfer'),
    sa.Column('coordinator_type', sa.String(length=30), nullable=False, comment='Indicates which subsystem has initiated the transfer and is responsible for finalizing it. The value must be a valid python identifier, all lowercase, no double underscores. Example: direct, circular.'),
    sa.Column('recipient_creditor_id', sa.BigInteger(), nullable=False, comment='The payee'),
    sa.Column('amount', sa.BigInteger(), nullable=False, comment='The actual transferred (committed) amount may not exceed this number.'),
    sa.Column('sender_locked_amount', sa.BigInteger(), nullable=False, comment="This amount has been added to sender's `account.locked_amount`."),
    sa.Column('prepared_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.CheckConstraint('amount > 0'),
    sa.CheckConstraint('sender_locked_amount >= 0'),
    sa.ForeignKeyConstraint(['debtor_id', 'sender_creditor_id'], ['account.debtor_id', 'account.creditor_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('debtor_id', 'sender_creditor_id', 'transfer_id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('prepared_transfer')
    op.drop_table('scheduled_account_change')
    op.drop_table('rejected_transfer_signal')
    op.drop_table('prepared_transfer_signal')
    op.drop_table('issuer_policy')
    op.drop_table('issuer')
    op.drop_table('committed_transfer_signal')
    op.drop_table('account_change_signal')
    op.drop_table('account')
    # ### end Alembic commands ###
